@model localXchange.Models.createProductViewModel

@{
    ViewBag.Title = "Change Product Listing";
}

<h2>@ViewBag.Title</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>ProductModel</h4>
        <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.ID)
                @Html.HiddenFor(model => model.categoryID)
                @Html.HiddenFor(model => model.sellerID)
                @Html.HiddenFor(model => model.dateListed)

        <div class="formGroup">
            @Html.LabelFor(model => model.sellerID, htmlAttributes: new { @class = "control-label formLabel" })
            <div class="formItem">
                @Html.DisplayFor(model => model.seller.UserName, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="formGroup">
            @Html.LabelFor(model => model.productName, htmlAttributes: new { @class = "control-label formLabel" })
            <div class="formItem">
                @Html.EditorFor(model => model.productName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.productName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="formGroup">
            @Html.ActionLink("Add Photos", "addPictures", "Product", new { productID = Model.ID }, new { @class = "addPhotoLink" })
        </div>

        <div class="formGroup">
            @Html.LabelFor(model => model.qtyAvail, htmlAttributes: new { @class = "control-label formLabel" })
            <div class="formItem">
                @Html.EditorFor(model => model.qtyAvail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.qtyAvail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="formGroup">
            @Html.LabelFor(model => model.qtyRemain, htmlAttributes: new { @class = "control-label formLabel" })
            <div class="formItem">
                @Html.EditorFor(model => model.qtyRemain, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.qtyRemain, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="formGroup">
            @Html.LabelFor(model => model.state, htmlAttributes: new { @class = "control-label formLabel" })
            <div class="formItem">
                @Html.EditorFor(model => model.state, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.state, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="formGroup">
            @Html.LabelFor(model => model.city, htmlAttributes: new { @class = "control-label formLabel" })
            <div class="formItem">
                @Html.EditorFor(model => model.city, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.city, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="formGroup">
            @Html.LabelFor(model => model.zipcode, htmlAttributes: new { @class = "control-label formLabel" })
            <div class="formItem">
                @Html.EditorFor(model => model.zipcode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.zipcode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="formGroup">
            @Html.LabelFor(model => model.address, htmlAttributes: new { @class = "control-label formLabel" })
            <div class="formItem">
                @Html.EditorFor(model => model.address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="formGroup">
            @Html.LabelFor(model => model.unitQty, htmlAttributes: new { @class = "control-label formLabel formLabel unitQty" })
            @Html.Label("Unit", htmlAttributes: new { @class = "control-label formLabel formLabel unitDrop required" })
            <div class="formItem" style="clear:left;">
                @Html.EditorFor(model => model.unitQty, new { htmlAttributes = new { @class = "form-control unitQty", @placeholder = "X.XX", @style = "border-top-right-radius: 0;border-bottom-right-radius: 0;" } })
                @Html.DropDownListFor(m => m.unitID, Model.unitList, "Unit", new { @class = "form-control unitDrop", @style = "border-top-left-radius: 0;border-bottom-left-radius: 0;position: relative;left: -1px;" })
                @Html.ValidationMessageFor(model => model.unitQty, "", new { @class = "text-danger" })
                @Html.ValidationMessageFor(model => model.unitID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="formGroup">
            @Html.LabelFor(model => model.price, htmlAttributes: new { @class = "control-label formLabel" })
            <div class=" ">
                @Html.EditorFor(model => model.price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="formGroup">
            <label class="control-label formLabel formLabel">Images</label>
            <div class="formItem">
                <div class="radioButton" id="true">
                    @Html.Label("True")
                    @Html.RadioButtonFor(m => m.images, true, new { @class = "radioBtns", id = "true" } )
                </div>
                <div class="radioButton" id="false">
                    @Html.Label("False")
                    @Html.RadioButtonFor(m => m.images, false, new { @class = "radioBtns", id = "false" } )
                </div>
            </div>
        </div>

        <div class="formGroup">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
